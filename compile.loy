(require "l2r.rb")
(def (l2r_compile in_file out_file)
     (display "#!ruby -Ks\n" out_file)
     (display "require 'lib/lib.rb'\n" out_file)
     (loop (block ()
		 (= exp (read in_file))
		 (= ruby_str (compile exp false))
		 (if (not (define_macro? exp))
		     (display ruby_str out_file))
		 (out_file.flush)
		 (if (or (def? exp) (define_macro? exp))
		     (try
		      (eval ruby_str TOPLEVEL_BINDING)
		      (catch (SyntaxError)
			(puts "syntax error")
			(display exp)
			(newline)
			(puts "compile => \n" ruby_str))
		      (catch (=> exec)
			(puts "compile eval error")
			(display exp)
			(newline)
			(puts "compile =>\n" ruby_str)
			(p exec))))
		 (if (in_file.eof?)
		     (begin
		      (quit))))))

(def (repl)
     (loop (block ()
	    (display ">")
	    (try
	     (= sexp (read))
	     (= expr (compile sexp false))
	     (display (eval expr TOPLEVEL_BINDING))
	     (newline)
	     (catch (SyntaxError)
		    (puts "syntax error")
		    (display sexp)
		    (newline)
		    (puts "compile =>\n" expr))
	     (catch (=> exec)
	       (puts "compile eval error")
	       (display sexp)
	       (newline)
	       (puts "compile =>\n" expr)
	       (p exec))))))

(def (main)
     (lib_compile)
     (if (null? (ARGV.get 0))
	 (repl)
	 (if (null? (ARGV.get 1))
	   (l2r_compile (open (ARGV.get 0) "r")
			(open "out.rb" "w"))
	   (l2r_compile (open (ARGV.get 0) "r")
			(open (ARGV.get 1) "w")))))
			    
(main)

