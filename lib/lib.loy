(require "lib/read.rb")
(require "lib/loy.rb")
(def string? (a)
     (a.kind_of? String))
(def number? (o)
     (o.kind_of? Numeric))
(def symbol? (o)
     (o.kind_of? Symbol))
(def pair? (o)
     (o.kind_of? Array))
(def eq? (a b)
     (a.equal? b))

(def null? (a)
     (a.nil?))

(def (open_input_file path)
     (open path "r"))

(def (map fn lis)
     (if (null? lis)
	 nil
	 (cons 
	  (fn.call (car lis))
	  (map fn (cdr lis)))))

(def (append *lis)
     (= app_list nil)
     (lis.map (block (li)
		      (= app_list (cons li app_list))))
     app_list)

(def append2 (xs (ys nil))
    (if (null? xs)
        ys
      (cons (car xs) (append2 (cdr xs) ys))))

(def (reverse lis)
     (= rev (lambda (lis retlis)
	      (if (null? lis)
		  retlis
		(rev.call (cdr lis) (cons (car lis) retlis)))))
     (rev.call lis nil))

(def (newarray *arr)
     arr)

(def (memq sym lis)
     (cond 
      ((null? lis) 
       false)
      ((eq? sym (car lis))
       lis)
      (else
       (memq sym (cdr lis)))))

(def (caar code)
     (car (car code)))

(def (cdar code)
     (cdr (car code)))

(def (cddr code)
     (cdr (cdr code)))

(def (cadr code)
     (car (cdr code)))

(def (caddr code)
     (car (cdr (cdr code))))

(def (cdadr code)
     (cdr (car (cdr code))))

(def (caadr code)
     (car (car (cdr code))))

(def (cadar code)
     (car (cdr (car code))))

(def (a2l array)
     (let ((i 0) (array (array.reverse)) (lis nil))
       (loop 
	(block ()
	       (if (== (array.length) i) break)
	       (= lis (cons (array.get i) lis))
	       (= i (+ i 1))))
       lis))

(def (memq sym lis)
     (cond 
      ((null? lis) 
       false)
      ((eq? sym (car lis))
       lis)
      (else
       (memq sym (cdr lis)))))

(def (assoc key lis)
     (if (null? lis)
	 #f
       (if (eq? key (caar lis))
	   (car lis)
	 (assoc key (cdr lis)))))

(def (transfer ls)
    (if (pair? ls)
        (if (pair? (car ls))
            (if (eq? (caar ls) 'unquote)
                (list 'cons (cadar ls) (transfer (cdr ls)))
              (if (eq? (caar ls) 'unquote-splicing)
                  (list 'append2 (cadar ls) (transfer (cdr ls)))
                (list 'cons (transfer (car ls)) (transfer (cdr ls)))))
          (list 'cons (list 'quote (car ls)) (transfer (cdr ls))))
      (if (null? ls)
	  nil
	(list 'quote ls))))
(def (list_ref list num)
     (loop (block ()
	     (if (== num 0)
		 (return (car list)))
	     (= num (- num 1))
	     (= list (cdr list)))))

(macro (quasiquote x)
       (transfer x))

(macro (class x *body)
       `(begin
	 (rasm "class ")
	 ,x
	 ,@(a2l body)
	 (rasm "end\n")))
(macro (try *body)
  `(begin
     (rasm "begin\n")
     ,@(a2l body)
     (rasm "end")))
(macro (catch res *body)
  `(begin
     (rasm "rescue ")
     ,@(cond ((null? res)
	      "")
	     ((eq? '=> (car res))
	      `((rasm "=> ")
		,(cadr res)))
	     (else
	      res))
     ,@(a2l body)))

(macro (make_hash a hash_list)
  `(begin
     (rasm ,a.to_s)
     (rasm " = {")
     ,@(map (lambda (val)
	      `(begin
		 (macro_val_print ,(car val))
		 (rasm " => ")
		 (macro_val_print ,(cadr val))
		 (rasm ", "))) hash_list)
     (rasm "}")))

(macro (gethash a key)
  `(begin
     (macro_val_print ,a)
     (rasm "[")
     (macro_val_print ,key)
     (rasm "]")))

(macro (case exp *body)
       `(begin
	 (rasm "case ")
	 ,exp
	 ,@(map (lambda (con)
		  `(begin
		    ,(if (not (eq? (car con) 'else))
			 '(rasm "when "))
		    ,(car con)
		    ,@(cdr con))) (a2l body))
	 (rasm "\nend")))

(macro (while con *body)
       `(begin
	 (rasm "while ")
	 ,con
	 ,@(a2l body)
	 (rasm "endÂ¥n")))

(macro (aref arr num)
       `(begin
	 (macro_val_print ,arr)
	 (rasm "[")
	 (macro_val_print ,num)
	 (rasm "]")))

(macro (asm str)
       `(rasm ,str))

(macro (mcall fn x *args)
       `(begin
	 (macro_val_print ,x)
	 (rasm ".")
	 (macro_val_print ,fn)
	 (rasm "(")
	 ,@(map (lambda (arg)
		  `(begin
		    (macro_val_print ,arg)
		    (rasm ","))) (a2l args))
	 (rasm ")\n")))


(macro (define arg *body)
       `(= ,(car arg) ,(cons 'lambda (cons (cdr arg) (a2l body)))))

(macro (when con *body)
       `(if ,con
	    (begin ,@(a2l body))))

(macro (sets *varl_list)
       (define (fun varl_array)
         (= k nil)
	 (= i 0)
	 (loop 
	  (block ()
		 (= k (cons (list  '= (aref varl_array i) 
				   (aref varl_array i+1)) k))
		 i+=2
		 (when (> i varl_array.size-1)
		   break)))
          (reverse k))
       `(begin
	 ,@(fun.call varl_list)))

(macro (attr_reader *geters)
       `(begin
	  (rasm "attr_reader ")
	 (macro_val_print ,(aref geters 0))
	 ,@(map (lambda (val)
		  `(begin
		    (rasm ", ")
		    (macro_val_print ,val))) (cdr (a2l geters)))))

(macro (new_hash *hash_list)
  `(begin
     (rasm "{")
     ,@(map (lambda (val)
	      `(begin
		 (macro_val_print ,(car val))
		 (rasm " => ")
		 (macro_val_print ,(cadr val))
		 (rasm ", "))) (a2l hash_list))
     (rasm "}")))

(macro (defclass name *body)
       (define (defs def_list)
	 (if (eq? (car def_list) 'attr_reader)
	     def_list
	   (cons 'def def_list)))
       `(class ,name
	       ,@(map defs (a2l body))))