
(def (string_list_append str_list)
     (if (null? str_list)
	 ""
	 (+ (car str_list) (string_list_append (cdr str_list)))))

(def (map fn lis)
     (if (null? lis)
	 nil
	 (cons (fn.call (car lis)) (map fn (cdr lis)))))

(def (object? code)
  (or (string? code) (number? code)
      (eq? nil code) (symbol? code)
      (eq? true code) (eq? false code)))

(def (run? code)
  (& (pair? code) (symbol? (car code))))

(def (set? exp)
     (tagged_list? exp '=))

(def (tagged_list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

(def (cons? code)
  (tagged_list? code 'cons))

(def (tostr code)
     code.to_s)
(def (argp_print argp)
     (if argp
	 ""
	 "\n"))

(def (caar code)
     (car (car code)))

(def (cdar code)
     (cdr (car code)))

(def (cddr code)
     (cdr (cdr code)))

(def (cadr code)
     (car (cdr code)))

(def (caddr code)
     (car (cdr (cdr code))))

(def (cdadr code)
     (cdr (car (cdr code))))

(def (compile code argp)
     (cond ((object? code)
	    (+ "" code.to_s (argp_print argp)))
	   ((quote? code)
	    (if (symbol? (cadr code)) 
		(+ ":" (tostr (cadr code)))
		(compile (quote_compile (cadr code)) argp)))
	   ((set? code)
	    (+ "" (cadr code) " = " (compile (caddr code) false)))
	   ((cons? code)
	    (+ "[" (compile (cadr code) true) ","
	       (compile (caddr code) true) "]" (argp_print argp)))
	   ((car? code)
	    (+ "" (compile (cadr code) true) "[0]" (argp_print argp)))
	   ((cdr? code)
	    (+ "" (compile (cadr code) true) "[1]" (argp_print argp)))
	   ((cond? code)
	    (cond_compile (cdr code) argp))
	   ((if? code)
	    (if_compile (cdr code) argp))
	   ((def? code)
	    (def_compile (cdr code)))
	   ((lambda? code)
	    (lambda_compile (cdr code) argp))
	   ((begin? code)
	    (program_list_compile (cdr code)))
	   ((infix? code)
	    (infix_compile (car code) (cdr code) argp))
	   ((binfix? code)
	    (binfix_compile (car code) (cadr code) (caddr code) argp))
	   ((run? code)
	    (run_compile code argp))
	   
	   )
     )

(def (run_compile code argp)
     (+ "" (car code) 
	(if (null? (cdr code))
	    "()"
	    (if (& (null? (cddr code))
		     (tagged_list? (cadr code) 'block))
		(+ "()" (block_compile (cdadr code)))
		(args_compile (cdr code) argp)))))

(def (memq sym lis)
     (cond 
      ((null? lis) 
       false)
      ((eq? sym (car lis))
       lis)
      (else
       (memq sym (cdr lis)))))
	 
(def (infix? exp)
  (memq (car exp) '(+ - * / % **  ^ & or)))
(def (begin? exp)
  (tagged_list? exp 'begin))

(def (infix_compile inf arg_list argp)
     (+ (compile (car arg_list) true)
	(string_list_append 
	 (map (lambda (arg)
		(+ " " inf " "
		   (compile arg true))) (cdr arg_list)))
	(argp_print argp)))

(def (binfix? exp)
     (memq (car exp) '(< > <= ==)))

(def (binfix_compile inf arg1 arg2 argp)
     (+ (compile arg1 true)
	" " inf " " 
	(compile arg2 argp)))

(def (def_arg_string lis)
     (if (not (null? lis))
	 (begin
	   (+ "" (car lis)
	      (string_list_append (map (-> (code)
					   (+ ", " code)) (cdr lis)))))))
(def (def_compile code)
     (if (symbol? (car code))
	 (begin
	   (+ "def " (car code) "("
	      (def_arg_string (cadr code)) ")\n"
	      (program_list_compile (cddr code))
	      "end\n\n"))    
	 (begin
	   (+ "def " (caar code) "("
	      (def_arg_string (cdar code)) ")\n"
	      (program_list_compile (cdr code))
	      "end\n\n"))))
		  
(def (quote_compile lis)
  (cond 
   ((null? lis) nil)
   ((symbol? lis)
    (list 'quote lis))
   ((object? lis) lis)
   (else
    (list 'cons 
	  (quote_compile (car lis))
	  (quote_compile (cdr lis))))))

(def (lambda? code)
  (or 
   (tagged_list? code 'lambda)))
   ;(tagged_list? code '->)))

(def (lambda_compile lam_list argp)
     (+ "lambda {|" (def_arg_string (car lam_list))
	"|\n" (program_list_compile (cdr lam_list))
	"}" (argp_print argp)))
(def (block_compile bl_list)
     (+ " {|"
	(def_arg_string (car bl_list)) "|\n"
	(program_list_compile (cdr bl_list)) "}\n"))

(def (quote? exp)
  (tagged_list? exp 'quote))

(def (if? exp)
  (tagged_list? exp 'if))

(def (if_compile code argp)
     (+ "if " (compile (car code) false)
	(compile (cadr code) false)
	(if (null? (cddr code))
	    ""
	    (+ "else\n" (compile (caddr code) false)))
	"end" (argp_print argp)))

(def (args_cdr_compile args_list)
     (if (null? args_list)
	 ""
	 (+ ", " (compile (car args_list) true)
	    (args_cdr_compile (cdr args_list)))))
	 
(def (args_compile args_list argp)
     (+ "(" (compile (car args_list) true)
	;(args_cdr_compile (cdr args_list))
	(string_list_append
	 (map (lambda (code)
		(if (tagged_list? code 'block)
		    ""
		    (+ ", " (compile code true)))) (cdr args_list)))
	")" 
	(let ((bloc (block? args_list)))
	  (if (null? bloc)
	      ""
	      (block_compile bloc)))
	(argp_print argp)))

(def (block? lis)
  (if (null? lis)
      '()
      (if (tagged_list? (car lis) 'block)
	  (cdar lis)
	  (block? (cdr lis)))))

(def (car? code)
  (tagged_list? code 'car))

(def (cdr? code)
  (tagged_list? code 'cdr))

(def (cond? code)
  (tagged_list? code 'cond))

(def (cond_compile code argp)
     (+ "if " (compile (caar code) false)
	(program_list_compile (cdar code))
	(if (null? (cdr code))
	    ""
	   (string_list_append 
	    (map (-> (con)
		     (if (eq? 'else (car con))
			 (+ "else\n"
			    (program_list_compile (cdr con)))
			 (+ "elsif " (compile (car con)false)
			    (program_list_compile (cdr con)))))
		 (cdr code))))
	"end" (argp_print argp)))
(def (def? exp)
  (tagged_list? exp 'def))
(def (program_list_compile code_list)
  (string_list_append (map (lambda (a)
			     (compile a false)) code_list)))

(= cond_test '(cond (false (puts "hello, world"))
		    (false "hello")
		    (else (puts 3004)))
  )
(= lambda_test '(
		      (= lam (lambda (a b)
				 (puts a b)))
		      (|"lam.call"| 10 20)
		      )
)

(= def_test '(
	      (def (add a b)
		   (puts a b))
	      (add 2000 30)
	      )
)
(= infix_test '(
		(puts (+ 10 20 30 40))
		)
)
(= binfix_test '(
		 (puts (< 20 30))
		 )
)
(= block1_test '(
		 (|"3.times"| (block (i) (p i)))
		 )
)
		 
(eval (program_list_compile infix_test))
;(puts (string_list_append '("abc" "def" "hij")))