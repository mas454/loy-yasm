
(def (string_list_append str_list)
     (if (null? str_list)
	 ""
	 (+ (car str_list) (string_list_append (cdr str_list)))))

(def (map fn lis)
     (if (null? lis)
	 nil
	 (cons (fn.call (car lis)) (map fn (cdr lis)))))

(def (object? code)
  (or (string? code) (number? code)
      (eq? nil code) (symbol? code)
      (eq? true code) (eq? false code)))

(def (run? code)
  (& (pair? code) (symbol? (car code))))

(def (set? exp)
     (tagged_list? exp '=))

(def (tagged_list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

(def (cons? code)
  (tagged_list? code 'cons))

(def (tostr code)
     code.to_s)
(def (argp_print argp)
     (if argp
	 ""
	 "\n"))

(def (caar code)
     (car (car code)))

(def (cdar code)
     (cdr (car code)))

(def (cddr code)
     (cdr (cdr code)))

(def (cadr code)
     (car (cdr code)))

(def (caddr code)
     (car (cdr (cdr code))))

(def (compile code argp)
     (cond ((object? code)
	    (+ "" code.to_s (argp_print argp)))
	   ((quote? code)
	    (if (symbol? (cadr code)) 
		(+ ":" (tostr (cadr code)))
		(compile (quote_compile (cadr code)) argp)))
	   ((set? code)
	    (+ "" (cadr code) " = " (compile (caddr code) false)))
	   ((cons? code)
	    (+ "[" (compile (cadr code) true) ","
	       (compile (caddr code) true) "]" (argp_print argp)))
	   ((car? code)
	    (+ "" (compile (cadr code) true) "[0]" (argp_print argp)))
	   ((cdr? code)
	    (+ "" (compile (cadr code) true) "[1]" (argp_print argp)))
	   ((cond? code)
	    (cond_compile (cdr code) argp))
	   ((if? code)
	    (if_compile (cdr code) argp))
	   ((def? code)
	    (list 'def (list 'quote (cdr code))))
	   ((run? code)
	    (+ "" (car code) 
	       (if (null? (cdr code))
		   "()"
		   (args_compile (cdr code) argp))))
	   
	   )
     )

(def (quote_compile lis)
  (cond 
   ((null? lis) nil)
   ((symbol? lis)
    (list 'quote lis))
   ((object? lis) lis)
   (else
    (list 'cons 
	  (quote_compile (car lis))
	  (quote_compile (cdr lis))))))


(def (quote? exp)
  (tagged_list? exp 'quote))

(def (if? exp)
  (tagged_list? exp 'if))

(def (if_compile code argp)
     (+ "if " (compile (car code) false)
	(compile (cadr code) false)
	(if (null? (cddr code))
	    ""
	    (+ "else\n" (compile (caddr code) false)))
	"end" (argp_print argp)))

(def (args_cdr_compile args_list)
     (if (null? args_list)
	 ""
	 (+ ", " (compile (car args_list) true)
	    (args_cdr_compile (cdr args_list)))))
	 
(def (args_compile args_list argp)
     (+ "(" (compile (car args_list) true)
	(args_cdr_compile (cdr args_list))
	")" (argp_print argp)))
(def (car? code)
  (tagged_list? code 'car))

(def (cdr? code)
  (tagged_list? code 'cdr))

(def (cond? code)
  (tagged_list? code 'cond))

(def (cond_compile code argp)
     (+ "if " (compile (caar code) false)
	(program_list_compile (cdar code))
	(if (null? (cdr code))
	    ""
	   (string_list_append 
	    (map (-> (con)
		     (if (eq? 'else (car con))
			 (+ "else\n"
			    (program_list_compile (cdr con)))
			 (+ "elsif " (compile (car con)false)
			    (program_list_compile (cdr con)))))
		 (cdr code))))
	"end" (argp_print argp)))

(def (program_list_compile code_list)
  (string_list_append (map (lambda (a)
			     (compile a false)) code_list)))

(= cond_test '(cond (false (puts "hello, world"))
		    (false "hello")
		    (else (puts 3004)))
  )

(eval (compile cond_test  false))
;(puts (string_list_append '("abc" "def" "hij")))